[{"/Users/swethapothuganti/Desktop/book-search-engine/client/src/index.js":"1","/Users/swethapothuganti/Desktop/book-search-engine/client/src/App.js":"2","/Users/swethapothuganti/Desktop/book-search-engine/client/src/pages/SavedBooks.js":"3","/Users/swethapothuganti/Desktop/book-search-engine/client/src/pages/SearchBooks.js":"4","/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/Navbar.js":"5","/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/LoginForm.js":"6","/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/SignupForm.js":"7","/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/API.js":"8","/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/localStorage.js":"9","/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/auth.js":"10","/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/mutations.js":"11","/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/queries.js":"12"},{"size":266,"mtime":1670400878283,"results":"13","hashOfConfig":"14"},{"size":830,"mtime":1670486121765,"results":"15","hashOfConfig":"14"},{"size":3506,"mtime":1670551674682,"results":"16","hashOfConfig":"14"},{"size":5043,"mtime":1670549781929,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1670400878283,"results":"18","hashOfConfig":"14"},{"size":2617,"mtime":1670400878283,"results":"19","hashOfConfig":"14"},{"size":3268,"mtime":1670400878283,"results":"20","hashOfConfig":"14"},{"size":1392,"mtime":1670400878284,"results":"21","hashOfConfig":"14"},{"size":793,"mtime":1670400878284,"results":"22","hashOfConfig":"14"},{"size":1234,"mtime":1670400878284,"results":"23","hashOfConfig":"14"},{"size":1073,"mtime":1670548702979,"results":"24","hashOfConfig":"14"},{"size":273,"mtime":1670550623122,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bx44uz",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/swethapothuganti/Desktop/book-search-engine/client/src/index.js",[],["53","54"],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/App.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/pages/SavedBooks.js",["55","56","57","58","59"],"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { QUERY_ME } from \"../utils/queries\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\n//import { getMe, deleteBook } from \"../utils/API\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  //const [userData, setUserData] = useState({});\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  const { loading, data } = useQuery(QUERY_ME);\n  let userData = data;\n\n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error(\"something went wrong!\");\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const [deleteBook, { error }] = useMutation(REMOVE_BOOK);\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook(bookId, token);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const updatedUser = await response.json();\n      userData = updatedUser;\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/swethapothuganti/Desktop/book-search-engine/client/src/pages/SearchBooks.js",["60"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook({\n        variables: { ...bookToSave },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/Navbar.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/LoginForm.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/components/SignupForm.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/API.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/localStorage.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/auth.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/mutations.js",[],"/Users/swethapothuganti/Desktop/book-search-engine/client/src/utils/queries.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"71","line":21,"column":38,"nodeType":"67","messageId":"72","endLine":21,"endColumn":46},{"ruleId":"65","severity":1,"message":"73","line":23,"column":11,"nodeType":"67","messageId":"68","endLine":23,"endColumn":18},{"ruleId":"65","severity":1,"message":"74","line":52,"column":24,"nodeType":"67","messageId":"68","endLine":52,"endColumn":29},{"ruleId":"65","severity":1,"message":"74","line":63,"column":22,"nodeType":"67","messageId":"68","endLine":63,"endColumn":27},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-use-before-define","'userData' was used before it was defined.","usedBeforeDefined","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]